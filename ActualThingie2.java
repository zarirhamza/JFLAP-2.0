/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package source;

import java.util.*;
import java.util.Scanner;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.awt.AWTException;
import java.awt.Shape;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.transform.OutputKeys;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Zarir Hamza
 */
public class ActualThingie2 extends javax.swing.JFrame {

    ArrayList<JLabel> states = new ArrayList<>();
    ArrayList<JLabel> transition = new ArrayList<>();
    ArrayList<TransitionsData> lines = new ArrayList<>();
    ArrayList<StatesData> circles = new ArrayList<>();
    Shape rectangle = new Ellipse2D.Double(0, 0, 35, 35);
    ShapeIcon rectangleIcon = new ShapeIcon(rectangle, Color.RED);
    ShapeIcon yellowIcon = new ShapeIcon(rectangle, Color.YELLOW);
    ShapeIcon yellow2Icon = new ShapeIcon(rectangle, Color.GREEN);
    boolean move, yellow, self, sim = false;
    boolean valid = true;
    int counter = 0;
    int xp, yp = 0;
    int xbegin = 0, ybegin = 0, xend, yend = 0;
    Point x2 = new Point();
    Point x2x = new Point();

    /**
     * Creates new form ActualThingie2
     */
    public ActualThingie2() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Add State");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1510, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        jButton2.setText("Delete State");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jToggleButton1.setText("Move States");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Define State");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Add Transition");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Define Transition");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete Transition");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton7.setText("Initial Condition");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        jButton8.setVisible(false);
        jButton8.setText("Simulate");
        jButton8.setEnabled(false);
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton9.setVisible(false);
        jButton9.setText("Save");
        jButton9.setEnabled(false);
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jButton10.setVisible(false);
        jButton10.setText("Load");
        jButton10.setEnabled(false);
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setVisible(false);
        jButton11.setText("Clear All");
        jButton11.setEnabled(false);
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });

        jButton12.setText("Circuit");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });

        jButton13.setText("Save as PNG");
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton13MouseClicked(evt);
            }
        });

        jButton14.setText("Truth Table");
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton14MouseClicked(evt);
            }
        });

        jButton15.setVisible(false);
        jButton15.setText("PLD File");
        jButton15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton15MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton13)
                    .addComponent(jButton14)
                    .addComponent(jButton15))
                .addContainerGap(351, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(43, 43, 43)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    //FIX ARROWS
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        Shape rectangle = new Ellipse2D.Double(0, 0, 35, 35);
        ShapeIcon rectangleIcon = new ShapeIcon(rectangle, Color.RED);
        StatesData sInfo = new StatesData();
        JLabel rectanglelLabel = new JLabel();
        rectanglelLabel.setIcon(rectangleIcon);
        rectanglelLabel.setDisplayedMnemonic(0);
        rectanglelLabel.setText(String.format("%05d\n", Integer.parseInt(Integer.toBinaryString(counter))));
        sInfo.setName(String.format("%05d\n", Integer.parseInt(Integer.toBinaryString(counter))));
        rectanglelLabel.setHorizontalTextPosition(JLabel.CENTER);
        rectanglelLabel.setBounds(10 + (counter * 100) % 500, ((counter / 3) * 100) % 500, 40, 40);
        counter++;
        sInfo.setActualObject(rectanglelLabel);
        circles.add(sInfo);
        jPanel2.add(rectanglelLabel);
        jPanel2.revalidate();
        jPanel2.repaint();
        states.add(rectanglelLabel);
        rectanglelLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (rectanglelLabel.getDisplayedMnemonic() == 0 && sim == false) {
                    if (yellow == true) {
                        rectanglelLabel.setIcon(yellow2Icon);
                        rectanglelLabel.setDisplayedMnemonic(2);
                        yellow = false;
                    } else if (yellow != true) {
                        rectanglelLabel.setIcon(yellowIcon);
                        rectanglelLabel.setDisplayedMnemonic(1);
                        jPanel2.revalidate();
                        jPanel2.repaint();
                        yellow = true;
                    }
                } else {
                    rectanglelLabel.setIcon(rectangleIcon);
                    rectanglelLabel.setDisplayedMnemonic(0);
                    yellow = false;
                }
            }
        });

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        ArrayList<Integer> num = new ArrayList<>();
        for (int a = 0; a < states.size(); a++) {
            if (states.get(a).getDisplayedMnemonic() != 0) {

                for (int b = 0; b < lines.size(); b++) {
                    if (lines.get(b).getfState().equals(states.get(a).getText())) {
                        num.add(b);
                    } else if (lines.get(b).getnState().equals(states.get(a).getText())) {
                        num.add(b);
                    }
                }
                for (int c = 0; c < num.size(); c++) {
                    jPanel2.remove(transition.get(num.get(c)));
                    lines.remove(num.get(c));
                    transition.remove(num.get(c));
                }
                jPanel2.remove(states.get(a));
                jPanel2.revalidate();
                jPanel2.repaint();
                states.remove(a);
                circles.remove(a);
            }
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        int HIT_BOX_SIZE = 25;
        int width = HIT_BOX_SIZE;
        int height = HIT_BOX_SIZE;
        int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        int index = 0;
        boolean exists = false;
        double distance = 0;
        Line2D.Double rect = new Line2D.Double();
        ArrayList<Integer> num = new ArrayList<>();
        boolean first = true;
        //num.clear();
        for (int a = 0; a < transition.size(); a++) {
            if (transition.get(a).getBounds().contains(evt.getPoint())) {
                //    System.out.println("here");
                for (int c = 0; c < states.size(); c++) {

                    //      System.out.println(states.get(c).getText());
                    //    System.out.println(lines.get(a).getfState());
                    if (states.get(c).getText().equals(lines.get(a).getfState())) {
                        x1 = states.get(c).getX();
                        y1 = states.get(c).getY();
                    } else if (states.get(c).getText().equals(lines.get(a).getnState())) {
                        x2 = states.get(c).getX();
                        y2 = states.get(c).getY();
                    }

                    //  System.out.println(x1 + " " + y1 + " " + x2 + " " + y2 + lines.size());
                }

                if (x1 != 0 || y1 != 0) {

                    System.out.println("dasdadasd");
                    if (x1 == x2 && y1 == y2) {
                        num.add(a);
                        exists = true;
                    } else {
                        rect.setLine(x1, y1, x2, y2);

                        int boxX = evt.getPoint().y - HIT_BOX_SIZE / 2;
                        int boxY = evt.getPoint().x - HIT_BOX_SIZE / 2;
                        System.out.println(rect.getBounds2D() + " " + boxX + " " + boxY + " " + width + " " + height);
                        //    if (rect.getBounds2D().intersects(boxX, boxY, width, height)) {
                        // index = a;
                        System.out.println(a + " index is here");

                        if (first) {
                            distance = rect.ptLineDist(evt.getPoint());
                            first = false;
                            index = a;
                        } else if (rect.ptLineDist(evt.getPoint()) < distance) {
                            index = a;
                            distance = rect.ptLineDist(evt.getPoint());
                        }
                        num.add(a);
                        exists = true;

                    }
                    //}
                }
            }
        }
        if (exists) {
            if ((transition.get(index).getBorder()) == BorderFactory.createEmptyBorder()) {
                transition.get(index).setBorder(BorderFactory.createLineBorder(Color.black));
                //  System.out.println("hame");

                jPanel2.repaint();
                jPanel2.revalidate();
            } else {
                transition.get(index).setBorder(BorderFactory.createEmptyBorder());

                jPanel2.repaint();
                jPanel2.revalidate();
            }
            first = true;
            //  System.out.println(index);

        }


    }//GEN-LAST:event_jPanel2MouseClicked

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) {
            move = true;
            jToggleButton1.setText("Move State");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton1.setVisible(false);
            jButton2.setVisible(false);
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
            jButton3.setVisible(false);
            jButton4.setVisible(false);
            jButton5.setEnabled(false);
            jButton5.setVisible(false);
            jButton6.setEnabled(false);
            jButton6.setVisible(false);
            jButton7.setEnabled(false);
            jButton7.setVisible(false);
            jButton8.setVisible(true);
            jButton8.setEnabled(true);
            jButton9.setVisible(true);
            jButton9.setEnabled(true);
            jButton10.setVisible(true);
            jButton10.setEnabled(true);
            jButton11.setVisible(true);
            jButton11.setEnabled(true);
            jButton12.setVisible(true);
            jButton12.setEnabled(true);
        } else {
            move = false;
            sim = false;
            for (int a = 0; a < states.size(); a++) {
                states.get(a).setIcon(rectangleIcon);
                states.get(a).setDisplayedMnemonic(0);
            }
            jToggleButton1.setText("Edit State Diagram");
            jButton8.setText("Simulate");
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jButton3.setVisible(true);
            jButton4.setVisible(true);
            jButton5.setEnabled(true);
            jButton5.setVisible(true);
            jButton6.setEnabled(true);
            jButton6.setVisible(true);
            jButton7.setEnabled(true);
            jButton7.setVisible(true);
            jButton8.setVisible(false);
            jButton8.setEnabled(false);
            jButton9.setVisible(false);
            jButton9.setEnabled(false);
            jButton10.setVisible(false);
            jButton10.setEnabled(false);
            jButton11.setVisible(false);
            jButton11.setEnabled(false);
            jButton12.setVisible(false);
            jButton12.setEnabled(false);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        boolean cont = true;
        int index = 0;

        for (int a = 0; a < states.size(); a++) {

            if (states.get(a).getDisplayedMnemonic() != 0) {
                String counter2 = JOptionPane.showInputDialog("Input the State Number(Binary Numbers Please!)");
                if (counter2 == null || counter2.matches("[01]+") == false) {
                    JOptionPane.showMessageDialog(this.getOwner(), "Only Binary Non Empty Numbers Please!");
                    cont = false;
                }
                
                index = a;
                if (cont == true) {
                    for (int b = 0; b < lines.size(); b++) {
                        if (lines.get(b).getfState().equals(states.get(a).getText())) {
                            lines.get(b).setfState(String.format("%05d\n", Integer.parseInt(counter2)));
                        } else if (lines.get(b).getnState().equals(states.get(a).getText())) {
                            lines.get(b).setnState(String.format("%05d\n", Integer.parseInt(counter2)));
                        }
                    }
                    states.get(a).setText(String.format("%05d\n", Integer.parseInt(counter2)));
                    //  System.out.println(String.format("%05d\n", Integer.parseInt(counter2)));
                    circles.get(a).setName(String.format("%05d\n", Integer.parseInt(counter2)));
                    states.get(a).setIcon(rectangleIcon);
                    states.get(a).setDisplayedMnemonic(0);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                } else {
                    states.get(index).setIcon(rectangleIcon);
                    states.get(index).setDisplayedMnemonic(0);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                }

            }
        }

    }//GEN-LAST:event_jButton3MouseClicked


    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        int index = 0;
        valid = true;
        TransitionsData tData = new TransitionsData();
        Point px = null, p2x = null;
        for (int a = 0; a < states.size(); a++) {
            if (states.get(a).getDisplayedMnemonic() == 1) {
                self = true;
                xbegin = (int) states.get(a).getBounds().getX() + 17;
                ybegin = (int) states.get(a).getBounds().getY() + 17;
                states.get(a).setIcon(rectangleIcon);
                states.get(a).setDisplayedMnemonic(0);
                yellow = false;
                index = a;

                for (int b = 0; b < states.size(); b++) {
                    if (states.get(b).getDisplayedMnemonic() == 2) {
                        self = false;
                        xend = (int) states.get(b).getBounds().getX() + 17;
                        yend = (int) states.get(b).getBounds().getY() + 17;
                        for (int abc = 0; abc < lines.size(); abc++) {
                            if ((lines.get(abc).getfState().equals(states.get(a).getText()) && lines.get(abc).getnState().equals(states.get(b).getText()))) {
                                valid = false;
                                JOptionPane.showMessageDialog(this.getOwner(), "Transition Alread Drawn!", "Error", JOptionPane.ERROR_MESSAGE);
                                states.get(a).setIcon(rectangleIcon);
                                states.get(a).setDisplayedMnemonic(0);
                                states.get(b).setIcon(rectangleIcon);
                                states.get(b).setDisplayedMnemonic(0);
                            }
                        }
                        System.out.println("asdasda");

                        Point2D p = new Point2D.Double(xbegin, ybegin);
                        Point2D p2 = new Point2D.Double(xend, yend);

                        System.out.println(p + "adas" + p2);
                        if (xbegin >= xend && valid == true) {

                            tData.setfState(states.get(a).getText());
                            circles.get(a).settData(tData);
                            tData.setnState(states.get(b).getText());
                            circles.get(b).settData(tData);

                            Line2D.Double line2 = (Line2D.Double) computeLine(p, 5, p2, 5, true);
                            Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() + 10, line2.getP2().getY(), 10, 3));
                            lines.add(tData);
                            OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                            JLabel transitLabel = new JLabel(transit);
                            transition.add(transitLabel);

                            transitLabel.setBorder(BorderFactory.createEmptyBorder());
                            transitLabel.setText("Blank");
                            transitLabel.setForeground(Color.black);
                            transitLabel.setHorizontalTextPosition(JLabel.CENTER);
                            transitLabel.setVerticalTextPosition(JLabel.CENTER);
                            transitLabel.setBounds(line2.getBounds().x, line2.getBounds().y, line2.getBounds().width + 20, line2.getBounds().height + 20);
                            tData.setActualObject(transitLabel);
                            states.get(b).setIcon(rectangleIcon);
                            states.get(b).setDisplayedMnemonic(0);
                            jPanel2.add(transitLabel);
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        } else if (xbegin < xend && valid == true) {

                            tData.setfState(states.get(a).getText());
                            circles.get(a).settData(tData);
                            tData.setnState(states.get(b).getText());
                            circles.get(b).settData(tData);
                            Line2D.Double line2 = (Line2D.Double) computeLine(p, 10, p2, 10, true);
                            Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() - 10, line2.getP2().getY(), 10, 3));

                            OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                            JLabel transitLabel = new JLabel(transit);
                            transition.add(transitLabel);
                            transitLabel.setText("Blank");
                            transitLabel.setForeground(Color.black);
                            transitLabel.setHorizontalTextPosition(JLabel.CENTER);
                            transitLabel.setVerticalTextPosition(JLabel.CENTER);
                            transitLabel.setBounds(line2.getBounds().x, line2.getBounds().y, line2.getBounds().width - 10, line2.getBounds().height + 20);
                            lines.add(tData);

                            transitLabel.setBorder(BorderFactory.createEmptyBorder());
                            tData.setActualObject(transitLabel);
                            states.get(b).setIcon(rectangleIcon);
                            states.get(b).setDisplayedMnemonic(0);
                            jPanel2.add(transitLabel);
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        }
                    }

                }

                for (int zxy = 0; zxy < lines.size(); zxy++) {

                    if (lines.get(zxy).getfState().equals(states.get(a).getText()) && lines.get(zxy).getfState().equals(lines.get(zxy).getnState())) {
                        valid = false;
                        if (self == true) {
                            JOptionPane.showMessageDialog(this.getOwner(), "Transition Alread Drawn!", "Error", JOptionPane.ERROR_MESSAGE);
                            states.get(a).setIcon(rectangleIcon);
                            states.get(a).setDisplayedMnemonic(0);
                        }
                    }
                }
                if (self == true && valid == true) {
                    tData.setnState(states.get(index).getText());
                    tData.setfState(states.get(index).getText());
                    circles.get(a).settData(tData);

                    Path2D.Double rect = new Path2D.Double();
                    rect.moveTo(xbegin + 0, ybegin - 10);
                    rect.curveTo(xbegin + 50, ybegin + 20, xbegin + 40, ybegin + 15, xbegin - 10, ybegin + 20);
                    OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                    JLabel transitLabel = new JLabel(transit);
                    transition.add(transitLabel);
                    transitLabel.setText("Blank");
                    transitLabel.setForeground(Color.black);
                    transitLabel.setHorizontalTextPosition(JLabel.RIGHT);
                    transitLabel.setBounds(rect.getBounds().x, rect.getBounds().y, rect.getBounds().width + 30, rect.getBounds().height);
                    lines.add(tData);
                    tData.setActualObject(transitLabel);
                    transitLabel.setBorder(BorderFactory.createEmptyBorder());
                    states.get(index).setIcon(rectangleIcon);
                    states.get(index).setDisplayedMnemonic(0);
                    jPanel2.add(transitLabel);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                }

            }

        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        // System.out.println("The x is: " + evt.getX() + " The Y is: " + evt.getY());

    }//GEN-LAST:event_jPanel2MouseMoved

    private static Line2D.Double computeLine(
            Point2D center0, double radius0,
            Point2D center1, double radius1,
            boolean upper) {
        double dx = center1.getX() - center0.getX();
        double dy = center1.getY() - center0.getY();
        double invLength = 1.0 / Math.hypot(dx, dy);
        double dirX = dx * invLength;
        double dirY = dy * invLength;

        double rotDirX = dirY;
        double rotDirY = -dirX;
        if (upper) {
            rotDirX = -dirY;
            rotDirY = dirX;
        }

        double x0 = center0.getX() + rotDirX * radius0;
        double y0 = center0.getY() + rotDirY * radius0;

        double x1 = center1.getX() + rotDirX * radius1;
        double y1 = center1.getY() + rotDirY * radius1;

        return new Line2D.Double(x0, y0, x1, y1);
    }
    private void jPanel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseReleased

        if (move == true) {
            for (int a = 0; a < states.size(); a++) {
                if (states.get(a).getDisplayedMnemonic() != 0) {
                    states.get(a).setLocation(evt.getPoint());
                    states.get(a).setIcon(rectangleIcon);
                    states.get(a).setDisplayedMnemonic(0);
                    yellow = false;
                    for (int z = 0; z < lines.size(); z++) {
                        if (lines.get(z).getfState().equals(states.get(a).getText()) && !lines.get(z).getfState().equals(lines.get(z).getnState())) {
                            transition.get(z).setIcon(null);
                            for (int x = 0; x < states.size(); x++) {
                                if (states.get(x).getText().equals(lines.get(z).getnState()) && states.get(a).getText().equals(lines.get(z).getfState())) {
                                    int xbegin = (int) states.get(a).getBounds().getX();
                                    int ybegin = (int) states.get(a).getBounds().getY();
                                    int xend = (int) states.get(x).getBounds().getX();
                                    int yend = (int) states.get(x).getBounds().getY();
                                    Point2D p = new Point2D.Double(xbegin, ybegin);
                                    Point2D p3 = new Point2D.Double(xbegin, ybegin);
                                    Point2D p2 = new Point2D.Double(xend, yend);

                                    if (xbegin > xend) {
                                        Line2D.Double line2 = (Line2D.Double) computeLine(p3, 5, p2, 5, true);
                                        Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() + 10, line2.getP2().getY(), 10, 3));
                                        OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                                        transition.get(z).setIcon(transit);
                                        transition.get(z).setBounds(line2.getBounds().x, line2.getBounds().y, line2.getBounds().width + 20, line2.getBounds().height + 20);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                    } else {
                                        Line2D.Double line2 = (Line2D.Double) computeLine(p3, 10, p2, 10, true);
                                        Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() - 10, line2.getP2().getY(), 10, 3));

                                        OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                                        transition.get(z).setIcon(transit);
                                        transition.get(z).setBounds(rect.getBounds().x, rect.getBounds().y, rect.getBounds().width + 20, rect.getBounds().height + 20);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                    }

                                }
                            }
                        } else if (lines.get(z).getnState().equals(states.get(a).getText()) && !lines.get(z).getfState().equals(lines.get(z).getnState())) {
                            transition.get(z).setIcon(null);
                            for (int x = 0; x < states.size(); x++) {
                                if (states.get(x).getText().equals(lines.get(z).getfState()) && states.get(a).getText().equals(lines.get(z).getnState())) {
                                    int xend = (int) states.get(a).getBounds().getX();
                                    int yend = (int) states.get(a).getBounds().getY();
                                    int xbegin = (int) states.get(x).getBounds().getX();
                                    int ybegin = (int) states.get(x).getBounds().getY();

                                    Point2D p = new Point2D.Double(xbegin, ybegin);
                                    Point2D p2 = new Point2D.Double(xend, yend);
                                    if (xbegin > xend) {
                                        Line2D.Double line2 = (Line2D.Double) computeLine(p, 5, p2, 5, true);
                                        Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() + 10, line2.getP2().getY(), 10, 3));

                                        OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                                        transition.get(z).setIcon(transit);
                                        transition.get(z).setBounds(line2.getBounds().x, line2.getBounds().y, line2.getBounds().width + 20, line2.getBounds().height + 20);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                    } else {
                                        Line2D.Double line2 = (Line2D.Double) computeLine(p, 10, p2, 10, true);
                                        Path2D.Double rect = new Path2D.Double(drawArrowLine(line2.getP1().getX(), line2.getP1().getY(), line2.getP2().getX() - 10, line2.getP2().getY(), 10, 3));

                                        OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                                        transition.get(z).setIcon(transit);
                                        transition.get(z).setBounds(line2.getBounds().x, line2.getBounds().y, line2.getBounds().width + 20, line2.getBounds().height + 20);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                    }
                                }
                            }
                        } else if (lines.get(z).getfState().equals(states.get(a).getText()) && lines.get(z).getnState().equals(states.get(a).getText())) {
                            //       System.out.println(lines.get(z).getfState() + " " + lines.get(z).getnState());
                            //  transition.get(z).setIcon(null);
                            int xbegin = (int) states.get(a).getBounds().getX();
                            int ybegin = (int) states.get(a).getBounds().getY();
                            Path2D.Double rect3 = new Path2D.Double();

                            rect3.moveTo(xbegin + 30, ybegin + 10);
                            rect3.curveTo(xbegin + 50, ybegin + 40, xbegin + 40, ybegin + 35, xbegin + 10, ybegin + 40);
                            OutlineIcon transit = new OutlineIcon(rect3, Color.BLACK);
                            transition.get(z).setIcon(transit);
                            transition.get(z).setBounds(rect3.getBounds().x, rect3.getBounds().y, rect3.getBounds().width + 30, rect3.getBounds().height);
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jPanel2MouseReleased

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        boolean same = false;
        ArrayList<String> inputs = new ArrayList<>();
        //MAKE SURE BINARY VALUES ARE NOT THE SAME
        for (int a = 0; a < transition.size(); a++) {
            if ((transition.get(a).getBorder()) != BorderFactory.createEmptyBorder() && transition.get(a).getText().equals("Blank")) {
                String counter2 = JOptionPane.showInputDialog("Enter an input(Binary Please)! \n Current Value is: " + transition.get(a).getText());

                if (counter2 != null && counter2.matches("[01]+") == true) {
                    for (int xyz = 0; xyz < lines.size(); xyz++) {
                        if (lines.get(xyz).getInput() != null && lines.get(xyz).getInput().equals(counter2) && lines.get(xyz).getfState().equals(lines.get(a).getfState())) {
                            JOptionPane.showMessageDialog(this.getOwner(), "State " + lines.get(xyz).getfState() + " already has a transition with this input!");
                            same = true;
                        }

                    }
                    if (same != true) {
                        transition.get(a).setText(counter2);
                        lines.get(a).setInput(counter2);
                    }
                } else {
                    JOptionPane.showMessageDialog(this.getOwner(), "Only Binary Non Empty Numbers Please!");
                }

                transition.get(a).setBorder(BorderFactory.createEmptyBorder());
                transition.get(a).setForeground(Color.BLACK);
                jPanel2.revalidate();
                jPanel2.repaint();
            } else if ((transition.get(a).getBorder()) != BorderFactory.createEmptyBorder()) {
                String counter2 = JOptionPane.showInputDialog("Enter an input(Binary Please)! \n Current Value is: " + transition.get(a).getText());

                if (counter2 != null && counter2.matches("[01]+") == true) {
                    /*for (int xyz = 0; xyz < lines.size(); xyz++) {
                        if (lines.get(xyz).getInput() != null && lines.get(xyz).getInput().contains(counter2) && lines.get(xyz).getfState().equals(lines.get(a).getfState())) {
                            JOptionPane.showMessageDialog(this.getOwner(), "State " + lines.get(xyz).getfState() + " already has a transition with this input!");
                            same = true;
                        }

                    }
                    if (same != true ) {
                        transition.get(a).setText(counter2+ "/" + transition.get(a).getText());
                       lines.get(a).setInput(counter2+ "/" + lines.get(a).getInput());
                       }*/
                    for (int n = 0; n < lines.size(); n++) {
                        if (transition.get(n).getText().equals(transition.get(a).getText())) {
                            if (lines.get(n).getInput().contains("/")) {
                                String[] array;
                                array = lines.get(n).getInput().split("/");
                                for (int v = 0; v < array.length; v++) {
                                    inputs.add(array[v]);
                                }
                            } else {
                                inputs.add(lines.get(n).getInput());
                            }
                        }
                    }
                    for (int l = 0; l < inputs.size(); l++) {
                        System.out.println(inputs.get(l) + " THIS IS THE SYSTEM PRINT");

                        if (Integer.parseInt(counter2, 2) == Integer.parseInt(inputs.get(l), 2)) {
                            System.out.println(counter2 + "sadasd" + inputs.get(l));
                            JOptionPane.showMessageDialog(this.getOwner(), "Transition already containes this input");
                            same = true;
                        }
                    }
                    if (same != true) {
                        transition.get(a).setText(counter2 + "/" + transition.get(a).getText());
                        lines.get(a).setInput(counter2 + "/" + lines.get(a).getInput());
                    }
                } else {
                    JOptionPane.showMessageDialog(this.getOwner(), "Only Binary Non Empty Numbers Please!");
                }

                transition.get(a).setBorder(BorderFactory.createEmptyBorder());
                transition.get(a).setForeground(Color.BLACK);
                jPanel2.revalidate();
                jPanel2.repaint();
            }
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked

        for (int a = 0; a < transition.size(); a++) {
            if ((transition.get(a).getBorder()) != BorderFactory.createEmptyBorder()) {
                for (int b = 0; b < circles.size(); b++) {
                    for (int c = 0; c < circles.get(b).gettDataList().size(); c++) {
                        if (circles.get(b).gettDataList().get(c) == lines.get(a)) {
                            circles.get(b).gettDataList().remove(c);
                            b = 0;
                            c = 0;

                        }
                    }
                }

                jPanel2.remove(transition.get(a));
                jPanel2.revalidate();
                jPanel2.repaint();
                lines.remove(a);
                transition.remove(a);
            }
        }

    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        for (int a = 0; a < states.size(); a++) {
            if (states.get(a).getDisplayedMnemonic() != 0) {
                if (circles.get(a).isiCondition()) {
                    states.get(a).setBorder(null);
                    circles.get(a).setiCondition(false);
                    states.get(a).setIcon(rectangleIcon);
                    states.get(a).setDisplayedMnemonic(0);
                } else {
                    states.get(a).setBorder(BorderFactory.createEtchedBorder(1));
                    circles.get(a).setiCondition(true);
                    states.get(a).setIcon(rectangleIcon);
                    states.get(a).setDisplayedMnemonic(0);
                }
            }
        }
    }//GEN-LAST:event_jButton7MouseClicked

    public boolean validateDiagram() {
        ArrayList<Integer> td = new ArrayList<>();
        ArrayList<String> inputs = new ArrayList<>();
        String message = "";
        td.clear();
        boolean count = true;
        for (int a = 0; a < lines.size(); a++) {
            if ("Blank".equals(lines.get(a).getInput()) || lines.get(a).getInput() == null) {
                td.add(a);
                if (count == true) {
                    message = message + " Error! Define the lines from: \n" + lines.get(a).getfState().trim() + " to " + lines.get(a).getnState();
                    count = false;
                } else {
                    message = message + lines.get(a).getfState().trim() + " to " + lines.get(a).getnState();
                }
            }
            count = true;
        }
        //  System.out.println(lines.size());
        for (int a = 0; a < lines.size(); a++) {
            if (transition.get(a).getText().equals("Blank") == false) {
                if (lines.get(a).getInput().contains("/")) {

                    String[] array;
                    array = lines.get(a).getInput().split("/");
                    for (int v = 0; v < array.length; v++) {
                        inputs.add(array[v]);
                    }
                } else {
                    inputs.add(lines.get(a).getInput());
                }
            }

            for (int h = 0; h < inputs.size(); h++) {
                for (int s = 0; s < inputs.size(); s++) {
                    if (inputs.get(h).length() != inputs.get(s).length()) {
                        //  if(message.contains("Please make sure all inputs have the same number of bits!") == false){
                        //    message = message + " Please make sure all inputs have the same number of bits! \n " + inputs.get(h) + " and " + inputs.get(s) + "\n";
                        // }
                        //else
                        //  message = message + inputs.get(h) + " and " + inputs.get(s) + "\n";
                    }
                }
            }
        }
        count = false;
        td.clear();
        ArrayList<String> td2 = new ArrayList<>();
        for (int xyz = 0; xyz < circles.size(); xyz++) {
            for (int abc = 0; abc < circles.size(); abc++) {

                // System.out.println(td);
                if (circles.get(xyz).isiCondition()) {
                    count = true;
                } else if (circles.get(xyz).getName().equals(circles.get(abc).getName()) && td2.contains(circles.get(xyz).getName()) == false && xyz != abc) {
                    td2.add(circles.get(xyz).getName());
                    //    System.out.println(circles.get(xyz).getName() + " " + circles.get(abc).getName());
                    message = message + " Please Make sure State Definitions are not the same: \n " + circles.get(xyz).getName();
                }

            }
            if (circles.get(xyz).gettDataList().isEmpty()) {
                if (message.contains("The following states have no transitions related to them:")) {
                    message = message + circles.get(xyz).getName();
                } else {
                    message = message + " The following states have no transitions related to them: \n" + circles.get(xyz).getName();
                }
            }
        }
        if (count == false) {
            message = message + "Please Define An Initial Condition!";
        }
        if (message != "") {
            JTextArea ta = new JTextArea(message);
            JScrollPane scrollPane = new JScrollPane(ta);
            ta.setLineWrap(true);
            ta.setWrapStyleWord(true);
            scrollPane.setPreferredSize(new Dimension(500, 200));
            JOptionPane.showMessageDialog(this.getOwner(), scrollPane, "ERROR", JOptionPane.OK_OPTION);
            return false;
        } else {
            return true;
        }
    }


    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked

        if (validateDiagram() == true) {
            ArrayList<String> ic = new ArrayList<String>();
            String chosenIC = null;
            String chosenState = null;
            int index = 0;
            move = false;
            sim = true;

            if (jButton8.getText() == "Simulate") {
                for (int a = 0; a < circles.size(); a++) {
                    states.get(a).setIcon(rectangleIcon);
                    states.get(a).setDisplayedMnemonic(0);
                    if (circles.get(a).isiCondition()) {
                        ic.add(circles.get(a).getName());
                    }
                }

                chosenIC = (String) JOptionPane.showInputDialog(jPanel2, "Please Choose an Initial Condition: ", "Initial Condition", JOptionPane.PLAIN_MESSAGE, null, ic.toArray(), ic.get(0));
                if (chosenIC == null) {
                    sim = false;
                    move = true;
                    jButton8.setText("Simulate");
                    JOptionPane.showMessageDialog(this.getOwner(), "Simulation Canceled!");

                }
                for (int a = 0; a < circles.size(); a++) {
                    if (circles.get(a).getName().equals(chosenIC)) {
                        states.get(a).setIcon(yellowIcon);
                        states.get(a).setDisplayedMnemonic(1);
                        JOptionPane.showMessageDialog(this.getOwner(), "Initial Condition Set!");
                    }
                }
                jButton8.setText("Simulate Next State");
            } else {
                ic.clear();

                for (int a = 0; a < states.size(); a++) {
                    if (states.get(a).getDisplayedMnemonic() != 0) {

                        //   System.out.println("this is here");
                        for (int b = 0; b < transition.size(); b++) {
                            if (lines.get(b).getfState().equals(states.get(a).getText())) {
                                ic.add(lines.get(b).getInput());
                                index = a;
                            }
                        }
                    }
                }
                chosenState = (String) JOptionPane.showInputDialog(jPanel2, "Please Choose an Input", "Input", JOptionPane.PLAIN_MESSAGE, null, ic.toArray(), null);
                if (chosenState == null) {
                    sim = false;
                    move = true;
                    jButton8.setText("Simulate");
                    JOptionPane.showMessageDialog(this.getOwner(), "Simulation Canceled!");
                }
                for (int y = 0; y < states.size(); y++) {
                    states.get(y).setIcon(rectangleIcon);
                    states.get(y).setDisplayedMnemonic(0);
                }
                for (int z = 0; z < lines.size(); z++) {
                    if (lines.get(z).getInput().equals(chosenState)) {
                        if (lines.get(z).getfState().equals(states.get(index).getText())) {
                            for (int x = 0; x < states.size(); x++) {
                                if (states.get(x).getText().equals(lines.get(z).getnState())) {
                                    states.get(x).setIcon(yellowIcon);
                                    states.get(x).setDisplayedMnemonic(1);
                                }
                            }
                        }
                    }
                }
            }
        } else {
            jToggleButton1.setSelected(false);
            jToggleButton1.setText("Editing State Diagram");
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jButton3.setVisible(true);
            jButton4.setVisible(true);
            jButton5.setEnabled(true);
            jButton5.setVisible(true);
            jButton6.setEnabled(true);
            jButton6.setVisible(true);
            jButton7.setEnabled(true);
            jButton7.setVisible(true);
            jButton8.setVisible(false);
            jButton8.setEnabled(false);
            jButton9.setVisible(false);
            jButton9.setEnabled(false);
            jButton10.setVisible(false);
            jButton10.setEnabled(false);
            jButton11.setVisible(false);
            jButton11.setEnabled(false);
        }
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        for (int a = 0; a < lines.size(); a++) {
            //   System.out.println(lines.get(a).getfState() + " " + lines.get(a).getInput() + " " + lines.get(a).getnState());
        }
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.newDocument();

            Element rootElement = doc.createElement("Diagram"); //Super big main thingie
            doc.appendChild(rootElement);

            for (int b = 0; b < states.size(); b++) {
                //   System.out.println(circles.get(b).getName());
                Element state = doc.createElement("State"); //create each state
                rootElement.appendChild(state);

                Element name = doc.createElement("ID"); //create each state
                name.appendChild(doc.createTextNode(circles.get(b).getName()));
                state.appendChild(name);

                Element ic = doc.createElement("isIC");
                ic.appendChild(doc.createTextNode(String.valueOf(circles.get(b).isiCondition())));
                state.appendChild(ic);

                Element x = doc.createElement("xCoordinates");
                x.appendChild(doc.createTextNode(Integer.toString(states.get(b).getX())));
                state.appendChild(x);

                Element y = doc.createElement("yCoordinates");
                y.appendChild(doc.createTextNode(Integer.toString(states.get(b).getY())));
                state.appendChild(y);
            }
            //add transitions

            for (int c = 0; c < transition.size(); c++) {
                Element transitions = doc.createElement("Transition");
                rootElement.appendChild(transitions);

                Element fState = doc.createElement("fState");
                fState.appendChild(doc.createTextNode(lines.get(c).getfState()));
                transitions.appendChild(fState);

                Element input = doc.createElement("input");
                input.appendChild(doc.createTextNode(transition.get(c).getText()));
                transitions.appendChild(input);

                Element nState = doc.createElement("nState");
                nState.appendChild(doc.createTextNode(lines.get(c).getnState()));
                transitions.appendChild(nState);

            }

            JFileChooser win = new JFileChooser();
            FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
            win.setDialogTitle("Choose File To Open");
            win.setFileFilter(xmlfilter);
            win.setCurrentDirectory(new File(System.getProperty("user.home")));
            win.setDialogType(JFileChooser.SAVE_DIALOG);
            win.setSelectedFile(new File("myfile.xml"));
            int fileCheck = win.showSaveDialog(this.getOwner());
            if (fileCheck == JFileChooser.APPROVE_OPTION) {
                //    java.io.File file = win.getSelectedFile();
                String filename = win.getSelectedFile().toString();
                if (!filename.endsWith(".xml")) {
                    filename += ".xml";
                }
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                DOMSource source = new DOMSource(doc);
                StreamResult result = new StreamResult(new File(filename));
                transformer.transform(source, result);
                StreamResult consoleResult = new StreamResult(System.out);
                transformer.transform(source, consoleResult);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked

        try {

            int index1 = 0, index2 = 0;
            JFileChooser exp = new JFileChooser();
            FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
            exp.setDialogTitle("Choose File To Open");
            exp.setFileFilter(xmlfilter);
            exp.setCurrentDirectory(new File(System.getProperty("user.home")));
            exp.setDialogType(JFileChooser.OPEN_DIALOG);
            //    exp.setSelectedFile(new File("myfile.xml"));
            int fileCheck = exp.showOpenDialog(this.getOwner());
            if (fileCheck == JFileChooser.APPROVE_OPTION) {
                //    java.io.File file = win.getSelectedFile();
                String filename = exp.getSelectedFile().toString();
                if (!filename.endsWith(".xml")) {
                    filename += ".xml";
                }

                //      File inputFile = new File("C:\\Users\\Zarir Hamza\\Documents\\save\\myfile.xml");
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(filename);
                doc.getDocumentElement().normalize();
                jPanel2.removeAll();
                jPanel2.revalidate();
                jPanel2.repaint();
                circles.clear();
                lines.clear();
                states.clear();
                transition.clear();
                NodeList n = doc.getElementsByTagName("State");
                for (int temp = 0; temp < n.getLength(); temp++) {

                    StatesData circ = new StatesData();
                    Node nNode = n.item(temp);
                    System.out.println("\nCurrent Element :" + nNode.getNodeName());
                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        System.out.println("Name : "
                                + eElement.getElementsByTagName("ID").item(0).getTextContent());
                        circ.setName(eElement.getElementsByTagName("ID").item(0).getTextContent());
                        System.out.println("X: "
                                + eElement
                                .getElementsByTagName("xCoordinates")
                                .item(0)
                                .getTextContent());
                        System.out.println("Y : "
                                + eElement
                                .getElementsByTagName("yCoordinates")
                                .item(0)
                                .getTextContent());
                        System.out.println("iC : "
                                + Boolean.parseBoolean(eElement
                                        .getElementsByTagName("isIC")
                                        .item(0)
                                        .getTextContent()));
                        circ.setiCondition(Boolean.parseBoolean(eElement.getElementsByTagName("isIC").item(0).getTextContent()));
                        JLabel state = new JLabel();
                        state.setBounds(Integer.parseInt(eElement.getElementsByTagName("xCoordinates").item(0).getTextContent()), Integer.parseInt(eElement.getElementsByTagName("yCoordinates").item(0).getTextContent()), 40, 40);
                        state.setText(circ.getName());
                        state.setIcon(rectangleIcon);
                        state.setDisplayedMnemonic(0);
                        state.setHorizontalTextPosition(JLabel.CENTER);
                        //System.out.println("asdasd" + circ.isiCondition());
                        if (circ.isiCondition()) {
                            state.setBorder(BorderFactory.createEtchedBorder(1));
                            //  System.out.println("icicicicicici");
                        }
                        state.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mousePressed(MouseEvent e) {
                                if (state.getDisplayedMnemonic() == 0 && sim == false) {
                                    if (yellow == true) {
                                        state.setIcon(yellow2Icon);
                                        state.setDisplayedMnemonic(2);
                                        yellow = false;
                                    } else if (yellow != true) {
                                        state.setIcon(yellowIcon);
                                        state.setDisplayedMnemonic(1);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                        yellow = true;
                                    }
                                } else {
                                    state.setIcon(rectangleIcon);
                                    state.setDisplayedMnemonic(0);
                                    yellow = false;
                                }
                            }
                        });

                        states.add(state);
                        circles.add(circ);
                        jPanel2.add(state);
                        jPanel2.revalidate();
                        jPanel2.repaint();
                    }

                }
                NodeList z = doc.getElementsByTagName("Transition");
                for (int xyz = 0; xyz < z.getLength(); xyz++) {
                    TransitionsData trans = new TransitionsData();
                    Node tNode = z.item(xyz);
                    if (tNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element tElement = (Element) tNode;
                        // System.out.println("fState: " + tElement.getElementsByTagName("fState").item(0).getTextContent());
                        trans.setfState(tElement.getElementsByTagName("fState").item(0).getTextContent());

//                        System.out.println("Input: " + tElement.getElementsByTagName("input").item(0).getTextContent());
                        trans.setInput(tElement.getElementsByTagName("input").item(0).getTextContent());

                        //                      System.out.println("nState: " + tElement.getElementsByTagName("nState").item(0).getTextContent());
                        trans.setnState(tElement.getElementsByTagName("nState").item(0).getTextContent());
                        lines.add(trans);
                    }

                    for (int f = 0; f < states.size(); f++) {
                        if (trans.getfState().equals(circles.get(f).getName())) {
                            index1 = f;
                            circles.get(f).settData(trans);
                        } else if (trans.getnState().equals(circles.get(f).getName())) {
                            index2 = f;
                            circles.get(f).settData(trans);
                        }

                        //                    System.out.println(trans.getfState() + " dasdadaksljdhasjdhaskj  " + trans.getnState() + " " + circles.get(f));
                    }

                    int xbegin = states.get(index1).getX();
                    int ybegin = states.get(index1).getY();
                    int yend = states.get(index2).getY();
                    int xend = states.get(index2).getX();
                    if (index1 != index2) {
                        if (xbegin > xend && valid == true) {
                            Path2D.Double rect = new Path2D.Double(drawArrowLine(xbegin, ybegin, xend, yend, 10, 3));
                            OutlineIcon transit = new OutlineIcon(drawArrowLine(xbegin, ybegin, xend + 30, yend, 10, 3), Color.BLACK);
                            JLabel transitLabel = new JLabel(transit);
                            transition.add(transitLabel);

                            transitLabel.setBorder(BorderFactory.createEmptyBorder());
                            transitLabel.setText(trans.getInput());
                            transitLabel.setForeground(Color.black);
                            transitLabel.setHorizontalTextPosition(JLabel.CENTER);
                            transitLabel.setVerticalTextPosition(JLabel.CENTER);
                            transitLabel.setBounds(rect.getBounds().x, rect.getBounds().y, rect.getBounds().width + 20, rect.getBounds().height + 20);
                            jPanel2.add(transitLabel);
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        } else if (xbegin < xend && valid == true) {
                            xbegin = xbegin + 5;
                            ybegin = ybegin + 25;
                            xend = xend + 5;
                            yend = yend + 25;
                            Path2D.Double rect = new Path2D.Double(drawArrowLine(xbegin, ybegin, xend - 10, yend, 10, 3));
                            OutlineIcon transit = new OutlineIcon(drawArrowLine(xbegin, ybegin, xend - 10, yend, 10, 3), Color.BLACK);
                            JLabel transitLabel = new JLabel(transit);
                            transition.add(transitLabel);
                            transitLabel.setText(trans.getInput());
                            transitLabel.setForeground(Color.black);
                            transitLabel.setHorizontalTextPosition(JLabel.CENTER);
                            transitLabel.setVerticalTextPosition(JLabel.CENTER);
                            transitLabel.setBounds(rect.getBounds().x, rect.getBounds().y, rect.getBounds().width + 20, rect.getBounds().height + 20);

                            transitLabel.setBorder(BorderFactory.createEmptyBorder());
                            jPanel2.add(transitLabel);
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        }

                    } else {
                        Path2D.Double rect = new Path2D.Double();
                        rect.moveTo(xbegin + 30, ybegin + 10);
                        rect.curveTo(xbegin + 50, ybegin + 40, xbegin + 40, ybegin + 35, xbegin + 10, ybegin + 40);
                        OutlineIcon transit = new OutlineIcon(rect, Color.BLACK);
                        JLabel transitLabel = new JLabel(transit);
                        transition.add(transitLabel);
                        transitLabel.setText(trans.getInput());
                        transitLabel.setForeground(Color.black);
                        transitLabel.setHorizontalTextPosition(JLabel.RIGHT);
                        transitLabel.setBounds(rect.getBounds().x, rect.getBounds().y, rect.getBounds().width + 30, rect.getBounds().height);

                        transitLabel.setBorder(BorderFactory.createEmptyBorder());
                        jPanel2.add(transitLabel);
                        jPanel2.revalidate();
                        jPanel2.repaint();
                    }
                }
            }
            counter = states.size();
            //      System.out.println(lines + " this is here ");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton10MouseClicked

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked
        int x = JOptionPane.showConfirmDialog(this.getOwner(), "Are You Absolutely sure you want to clear EVERYTHING!");
        if (x == JOptionPane.YES_OPTION) {
            counter = 0;
            transition.clear();
            lines.clear();
            states.clear();
            circles.clear();
            jPanel2.removeAll();
            jPanel2.revalidate();
            jPanel2.repaint();
        }
    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        if (lines.isEmpty() == false) {
            truthTable tab = new truthTable();
            // JFrame j = new JFrame();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            ArrayList<ArrayList<Integer>> minTerms = tab.findMinterms(x);
            ArrayList<Set> groups = new ArrayList<>();
            for (int a = 0; a < minTerms.size(); a++) {
                if (minTerms.get(a).isEmpty() == false) {
                    groups.add(tab.groupColumn(minTerms.get(a)));
                }
            }
            String dumb = converToEqn(groups);
            System.out.println(groups);
            System.out.println(dumb);
            System.out.println(groups.get(0));
            Object arra2 [] = groups.get(0).toArray();
            draw d = new draw(groups.size(), dumb, arra2[0].toString().length());
        }

        /*  String x = JOptionPane.showInputDialog("Input the number of D Flip Flops");
         String numofVar = JOptionPane.showInputDialog("Enter the number of variables");
         String eqn =  JOptionPane.showInputDialog("Input equation");
         if(eqn != null || x != null){
         //   System.out.println("dasdasda" + eqn);
           
    }*/

    }//GEN-LAST:event_jButton12MouseClicked

    private void jButton13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton13MouseClicked
        String[] buttons = {"circuit", "state diagram", "truth table"};

        int rc = JOptionPane.showOptionDialog(null, "Choose one to save picture of: ", "Save Picture",
                JOptionPane.INFORMATION_MESSAGE, 0, null, buttons, buttons[2]);

        if (rc == 1) {
            BufferedImage x = ScreenImage.createImage(jPanel2);
            try {
                JFileChooser win = new JFileChooser();
                FileNameExtensionFilter pngfilter = new FileNameExtensionFilter("png files (*.png)", "png");
                win.setDialogTitle("Choose File To Open");
                win.setFileFilter(pngfilter);
                win.setCurrentDirectory(new File(System.getProperty("user.home")));
                win.setDialogType(JFileChooser.SAVE_DIALOG);
                win.setSelectedFile(new File("myfile.png"));
                int fileCheck = win.showSaveDialog(this.getOwner());
                if (fileCheck == JFileChooser.APPROVE_OPTION) {
                    //    java.io.File file = win.getSelectedFile();
                    String filename = win.getSelectedFile().toString();
                    if (!filename.endsWith(".png")) {
                        filename += ".png";
                    }
                    ScreenImage.writeImage(x, filename);
                }
            } catch (IOException ex) {
                Logger.getLogger(ActualThingie2.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (rc == 2 && lines.isEmpty() == false) {
            truthTable tab = new truthTable();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            JScrollPane z = new JScrollPane(x);
            z.setColumnHeaderView(x.getTableHeader());
            x.setPreferredScrollableViewportSize(x.getPreferredSize());
            BufferedImage xy = ScreenImage.createImage(x);
            try {
                JFileChooser win = new JFileChooser();
                FileNameExtensionFilter pngfilter = new FileNameExtensionFilter("png files (*.png)", "png");
                win.setDialogTitle("Choose File To Open");
                win.setFileFilter(pngfilter);
                win.setCurrentDirectory(new File(System.getProperty("user.home")));
                win.setDialogType(JFileChooser.SAVE_DIALOG);
                win.setSelectedFile(new File("myfile.png"));
                int fileCheck = win.showSaveDialog(this.getOwner());
                if (fileCheck == JFileChooser.APPROVE_OPTION) {
                    //    java.io.File file = win.getSelectedFile();
                    String filename = win.getSelectedFile().toString();
                    if (!filename.endsWith(".png")) {
                        filename += ".png";
                    }
                    ScreenImage.writeImage(xy, filename);
                }
            } catch (IOException ex) {
                Logger.getLogger(ActualThingie2.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (rc == 0) {
            truthTable tab = new truthTable();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            ArrayList<ArrayList<Integer>> minTerms = tab.findMinterms(x);
            ArrayList<Set> groups = new ArrayList<>();
            //  System.out.println(minTerms);
            for (int a = 0; a < minTerms.size(); a++) {
                if (minTerms.get(a).isEmpty() == false) {
                    groups.add(tab.groupColumn(minTerms.get(a)));
                }
            }
            String dumb = converToEqn(groups);
            System.out.println(groups);
            System.out.println(dumb);
             Object arra2 [] = groups.get(0).toArray();
            draw d = new draw(groups.size(), dumb, arra2[0].toString().length());
//            d.getComponent(1);
/*   if (lines.isEmpty() == false) {
            truthTable tab = new truthTable();
            // JFrame j = new JFrame();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            ArrayList<ArrayList<Integer>> minTerms = tab.findMinterms(x);
            ArrayList<Set> groups = new ArrayList<>();
            for (int a = 0; a < minTerms.size(); a++) {
                if (minTerms.get(a).isEmpty() == false) {
                    groups.add(tab.groupColumn(minTerms.get(a)));
                }
            }
            String dumb = converToEqn(groups);
            System.out.println(groups);
            System.out.println(dumb);
            System.out.println(groups.get(0));
            Object arra2 [] = groups.get(0).toArray();
            draw d = new draw(groups.size(), dumb, arra2[0].toString().length());
        }
*/
            BufferedImage xy = null;

            try {
                JFileChooser win = new JFileChooser();
                FileNameExtensionFilter pngfilter = new FileNameExtensionFilter("png files (*.png)", "png");
                win.setDialogTitle("Choose File To Open");
                win.setFileFilter(pngfilter);
                win.setCurrentDirectory(new File(System.getProperty("user.home")));
                win.setDialogType(JFileChooser.SAVE_DIALOG);
                win.setSelectedFile(new File("myfile.png"));
                int fileCheck = win.showSaveDialog(this.getOwner());
                if (fileCheck == JFileChooser.APPROVE_OPTION) {
                    //    java.io.File file = win.getSelectedFile();
                    String filename = win.getSelectedFile().toString();
                    if (!filename.endsWith(".png")) {
                        filename += ".png";
                    }
                    xy = ScreenImage.createImage(d.getFrame());
                    ScreenImage.writeImage(xy, filename);
                }

            } catch (AWTException ex) {
                Logger.getLogger(ActualThingie2.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ActualThingie2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton13MouseClicked

    private void jButton14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton14MouseClicked
        // TODO add your handling code here:
        if (lines.isEmpty() == false) {
            truthTable tab = new truthTable();
            JFrame j = new JFrame();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            x.setCellSelectionEnabled(false);
            //disable editing

            JScrollPane z = new JScrollPane(x);
            x.setFillsViewportHeight(true);
            j.add(z);
            // j.setBackground(Color.white);
            j.setResizable(true);
            j.setPreferredSize(new Dimension(400, 400));
            //    j.setExtendedState(JFrame.MAXIMIZED_BOTH);
            j.setTitle("Truth Table");
            j.pack();
            j.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            j.setLocationByPlatform(true);
            j.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this.jPanel2, "There are no values to make a truth table!");
        }
    }//GEN-LAST:event_jButton14MouseClicked

    private void jButton15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton15MouseClicked
        // TODO add your handling code here:
        if (lines.isEmpty() == false) {
            truthTable tab = new truthTable();
            // JFrame j = new JFrame();
            JTable x = new JTable(tab.TruthTable(circles, lines));
            ArrayList<ArrayList<Integer>> minTerms = tab.findMinterms(x);
            ArrayList<Set> groups = new ArrayList<>();
            for (int a = 0; a < minTerms.size(); a++) {
                if (minTerms.get(a).isEmpty() == false) {
                    groups.add(tab.groupColumn(minTerms.get(a)));
                }
            }
            ArrayList<String> dumb = converToEqn2(groups);
            int outputpins = 0;
            for (ArrayList<Integer> gh : minTerms) {
                if (gh.isEmpty() == false) {
                    outputpins++;
                }
            }
            String pld = pld(dumb, outputpins, groups.size());
            System.out.println(groups);
            System.out.println(dumb);
            JFileChooser win = new JFileChooser();
            FileNameExtensionFilter pngfilter = new FileNameExtensionFilter("pld files (*.pld)", "pld");
            win.setDialogTitle("Choose File To Open");
            win.setFileFilter(pngfilter);
            win.setCurrentDirectory(new File(System.getProperty("user.home")));
            win.setDialogType(JFileChooser.SAVE_DIALOG);
            win.setSelectedFile(new File("myfile.pld"));
            int fileCheck = win.showSaveDialog(this.getOwner());
            if (fileCheck == JFileChooser.APPROVE_OPTION) {
                //    java.io.File file = win.getSelectedFile();
                String filename = win.getSelectedFile().toString();
                if (!filename.endsWith(".pld")) {
                    filename += ".pld";
                }
            }
        }
    }//GEN-LAST:event_jButton15MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed
    public String pld(ArrayList<String> x, int inputpins, int outputpins) {
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        Date date = new Date();
        String dat = dateFormat.format(date);
        String out = "";
        out += "Name      ;\n";
        out += "PartNo   00 ;\n";
        out += "Date     ";
        out += dat;
        out += " ;\n";
        out += "Revision 01 ;\n";
        out += "Designer YOUUUU ;\n";
        out += "Company  Google Inc ;\n";
        out += "Assembly None ;\n";
        out += "Location  ;\n";
        out += "Device   g22v10 ;\n";

        out += "\n/* *************** INPUT PINS ********************/\n";
        String input = "";
        String output = "";
        for (int i = 0; i < inputpins; i++) {
            input += "PIN  ";
            input += String.valueOf(i + 2);
            input += " = ";
            char c = (char) (65 + outputpins + i);
            input += String.valueOf(c);
            input += "                    \n";

        }
        out += input;

        out += "\n/* *************** OUTPUT PINS ********************/\n";

        for (int i = 0; i < outputpins; i++) {
            output += "PIN  ";
            output += String.valueOf(i + 14);
            output += " = ";
            char c = (char) (65 + i);
            output += String.valueOf(c);
            output += "                    \n";
        }
        out += output;
        out += "\n";

        for (String val : x) {
            out += val;
            out += "\n";
        }
        return out;
    }

    public String converToEqn(ArrayList<Set> x) {
        String eqn = "";
        for (int a = 0; a < x.size(); a++) {
            Iterator y = x.get(a).iterator();
            eqn = eqn + "D" + Integer.toString(a) + "=";
            while (y.hasNext()) {
                String temp = y.next().toString();
                //   System.out.println(temp);

                for (int let = 0; let < temp.length(); let++) {
                    if (temp.charAt(let) == '1') {
                        eqn = eqn + (char) (let + 65);

                    } else if (temp.charAt(let) == '0') {

                        eqn = eqn + "!" + (char) (let + 65);
                    }
                }
                eqn = eqn + "+";
            }
        }
        return eqn.substring(0, eqn.length() - 1);
    }

    public ArrayList<String> converToEqn2(ArrayList<Set> x) {
        ArrayList<String> ans = new ArrayList<>();
        String eqn = "";
        for (int a = 0; a < x.size(); a++) {
            Iterator y = x.get(a).iterator();
            eqn = eqn + "D" + Integer.toString(a) + "=";
            while (y.hasNext()) {
                String temp = y.next().toString();
                //   System.out.println(temp);

                for (int let = 0; let < temp.length(); let++) {
                    if (temp.charAt(let) == '1') {
                        eqn = eqn + (char) (let + 65);
                    } else if (temp.charAt(let) == '0') {

                        eqn = eqn + "!" + (char) (let + 65);
                    }
                }
                ans.add(eqn);
            }
        }
        return ans;
    }

    boolean simbyInput = false;

    private Path2D.Double drawArrowLine(double x1, double y1, double x2, double y2, int d, int h) {
        double dx = x2 - x1, dy = y2 - y1;
        double D = Math.sqrt(dx * dx + dy * dy);
        double xm = D - d, xn = xm, ym = h, yn = -h, x;
        double sin = dy / D, cos = dx / D;

        x = xm * cos - ym * sin + x1;
        ym = xm * sin + ym * cos + y1;
        xm = x;

        x = xn * cos - yn * sin + x1;
        yn = xn * sin + yn * cos + y1;
        xn = x;

        int[] xpoints = {(int) x2, (int) xm, (int) xn};
        int[] ypoints = {(int) y2, (int) ym, (int) yn};
        Path2D.Double linebody = new Path2D.Double();
        linebody.moveTo(x1, y1);
        linebody.lineTo(x2, y2);
        linebody.lineTo(xm, ym);
        linebody.lineTo(x2, y2);
        linebody.lineTo(xn, yn);
        Polygon poly = new Polygon(xpoints, ypoints, 3);
        //  linebody.append(poly, true);
        return linebody;
    }

    public static Path2D.Double createArrowForLine(
            int fromPointx,
            int fromPointy,
            double rotationDeg,
            double length,
            double wingsAngleDeg) {

        double ax = fromPointx;
        double ay = fromPointy;

        double radB = Math.toRadians(-rotationDeg + wingsAngleDeg);
        double radC = Math.toRadians(-rotationDeg - wingsAngleDeg);

        Path2D resultPath = new Path2D.Double();
        resultPath.moveTo(length * Math.cos(radB) + ax, length * Math.sin(radB) + ay);
        resultPath.lineTo(ax, ay);
        resultPath.lineTo(length * Math.cos(radC) + ax, length * Math.sin(radC) + ay);
        return (Path2D.Double) resultPath;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActualThingie2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActualThingie2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActualThingie2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActualThingie2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ActualThingie2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
